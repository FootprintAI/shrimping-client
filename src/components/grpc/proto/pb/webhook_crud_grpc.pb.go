// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebhookCRUDClient is the client API for WebhookCRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookCRUDClient interface {
	TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookResponse, error)
	VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error)
	SubscribeWebhook(ctx context.Context, in *SubscribeWebhookRequest, opts ...grpc.CallOption) (*SubscribeWebhookResponse, error)
	ListWebhook(ctx context.Context, in *ListWebhookRequest, opts ...grpc.CallOption) (*ListWebhookResponse, error)
	DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error)
}

type webhookCRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookCRUDClient(cc grpc.ClientConnInterface) WebhookCRUDClient {
	return &webhookCRUDClient{cc}
}

func (c *webhookCRUDClient) TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookResponse, error) {
	out := new(TestWebhookResponse)
	err := c.cc.Invoke(ctx, "/pb.WebhookCRUD/TestWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookCRUDClient) VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error) {
	out := new(VerifySignatureResponse)
	err := c.cc.Invoke(ctx, "/pb.WebhookCRUD/VerifySignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookCRUDClient) SubscribeWebhook(ctx context.Context, in *SubscribeWebhookRequest, opts ...grpc.CallOption) (*SubscribeWebhookResponse, error) {
	out := new(SubscribeWebhookResponse)
	err := c.cc.Invoke(ctx, "/pb.WebhookCRUD/SubscribeWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookCRUDClient) ListWebhook(ctx context.Context, in *ListWebhookRequest, opts ...grpc.CallOption) (*ListWebhookResponse, error) {
	out := new(ListWebhookResponse)
	err := c.cc.Invoke(ctx, "/pb.WebhookCRUD/ListWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookCRUDClient) DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error) {
	out := new(DeleteWebhookResponse)
	err := c.cc.Invoke(ctx, "/pb.WebhookCRUD/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookCRUDServer is the server API for WebhookCRUD service.
// All implementations must embed UnimplementedWebhookCRUDServer
// for forward compatibility
type WebhookCRUDServer interface {
	TestWebhook(context.Context, *TestWebhookRequest) (*TestWebhookResponse, error)
	VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error)
	SubscribeWebhook(context.Context, *SubscribeWebhookRequest) (*SubscribeWebhookResponse, error)
	ListWebhook(context.Context, *ListWebhookRequest) (*ListWebhookResponse, error)
	DeleteWebhook(context.Context, *DeleteWebhookRequest) (*DeleteWebhookResponse, error)
	mustEmbedUnimplementedWebhookCRUDServer()
}

// UnimplementedWebhookCRUDServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookCRUDServer struct {
}

func (UnimplementedWebhookCRUDServer) TestWebhook(context.Context, *TestWebhookRequest) (*TestWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestWebhook not implemented")
}
func (UnimplementedWebhookCRUDServer) VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignature not implemented")
}
func (UnimplementedWebhookCRUDServer) SubscribeWebhook(context.Context, *SubscribeWebhookRequest) (*SubscribeWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeWebhook not implemented")
}
func (UnimplementedWebhookCRUDServer) ListWebhook(context.Context, *ListWebhookRequest) (*ListWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhook not implemented")
}
func (UnimplementedWebhookCRUDServer) DeleteWebhook(context.Context, *DeleteWebhookRequest) (*DeleteWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (UnimplementedWebhookCRUDServer) mustEmbedUnimplementedWebhookCRUDServer() {}

// UnsafeWebhookCRUDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookCRUDServer will
// result in compilation errors.
type UnsafeWebhookCRUDServer interface {
	mustEmbedUnimplementedWebhookCRUDServer()
}

func RegisterWebhookCRUDServer(s grpc.ServiceRegistrar, srv WebhookCRUDServer) {
	s.RegisterService(&WebhookCRUD_ServiceDesc, srv)
}

func _WebhookCRUD_TestWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookCRUDServer).TestWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WebhookCRUD/TestWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookCRUDServer).TestWebhook(ctx, req.(*TestWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookCRUD_VerifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookCRUDServer).VerifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WebhookCRUD/VerifySignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookCRUDServer).VerifySignature(ctx, req.(*VerifySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookCRUD_SubscribeWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookCRUDServer).SubscribeWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WebhookCRUD/SubscribeWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookCRUDServer).SubscribeWebhook(ctx, req.(*SubscribeWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookCRUD_ListWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookCRUDServer).ListWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WebhookCRUD/ListWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookCRUDServer).ListWebhook(ctx, req.(*ListWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookCRUD_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookCRUDServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WebhookCRUD/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookCRUDServer).DeleteWebhook(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookCRUD_ServiceDesc is the grpc.ServiceDesc for WebhookCRUD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookCRUD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WebhookCRUD",
	HandlerType: (*WebhookCRUDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestWebhook",
			Handler:    _WebhookCRUD_TestWebhook_Handler,
		},
		{
			MethodName: "VerifySignature",
			Handler:    _WebhookCRUD_VerifySignature_Handler,
		},
		{
			MethodName: "SubscribeWebhook",
			Handler:    _WebhookCRUD_SubscribeWebhook_Handler,
		},
		{
			MethodName: "ListWebhook",
			Handler:    _WebhookCRUD_ListWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _WebhookCRUD_DeleteWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook_crud.proto",
}
