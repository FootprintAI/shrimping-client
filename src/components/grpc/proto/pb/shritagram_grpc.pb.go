// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShritagramClient is the client API for Shritagram service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShritagramClient interface {
	Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (Shritagram_CallbackClient, error)
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ShritagramResponse, error)
	Posts(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*ShritagramResponse, error)
	TopSearch(ctx context.Context, in *TopSearchRequest, opts ...grpc.CallOption) (*ShritagramResponse, error)
}

type shritagramClient struct {
	cc grpc.ClientConnInterface
}

func NewShritagramClient(cc grpc.ClientConnInterface) ShritagramClient {
	return &shritagramClient{cc}
}

func (c *shritagramClient) Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (Shritagram_CallbackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Shritagram_ServiceDesc.Streams[0], "/pb.shritagram/Callback", opts...)
	if err != nil {
		return nil, err
	}
	x := &shritagramCallbackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Shritagram_CallbackClient interface {
	Recv() (*ShritagramResponse, error)
	grpc.ClientStream
}

type shritagramCallbackClient struct {
	grpc.ClientStream
}

func (x *shritagramCallbackClient) Recv() (*ShritagramResponse, error) {
	m := new(ShritagramResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shritagramClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ShritagramResponse, error) {
	out := new(ShritagramResponse)
	err := c.cc.Invoke(ctx, "/pb.shritagram/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shritagramClient) Posts(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*ShritagramResponse, error) {
	out := new(ShritagramResponse)
	err := c.cc.Invoke(ctx, "/pb.shritagram/Posts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shritagramClient) TopSearch(ctx context.Context, in *TopSearchRequest, opts ...grpc.CallOption) (*ShritagramResponse, error) {
	out := new(ShritagramResponse)
	err := c.cc.Invoke(ctx, "/pb.shritagram/TopSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShritagramServer is the server API for Shritagram service.
// All implementations must embed UnimplementedShritagramServer
// for forward compatibility
type ShritagramServer interface {
	Callback(*CallbackRequest, Shritagram_CallbackServer) error
	Profile(context.Context, *ProfileRequest) (*ShritagramResponse, error)
	Posts(context.Context, *PostRequest) (*ShritagramResponse, error)
	TopSearch(context.Context, *TopSearchRequest) (*ShritagramResponse, error)
	mustEmbedUnimplementedShritagramServer()
}

// UnimplementedShritagramServer must be embedded to have forward compatible implementations.
type UnimplementedShritagramServer struct {
}

func (UnimplementedShritagramServer) Callback(*CallbackRequest, Shritagram_CallbackServer) error {
	return status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedShritagramServer) Profile(context.Context, *ProfileRequest) (*ShritagramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedShritagramServer) Posts(context.Context, *PostRequest) (*ShritagramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Posts not implemented")
}
func (UnimplementedShritagramServer) TopSearch(context.Context, *TopSearchRequest) (*ShritagramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopSearch not implemented")
}
func (UnimplementedShritagramServer) mustEmbedUnimplementedShritagramServer() {}

// UnsafeShritagramServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShritagramServer will
// result in compilation errors.
type UnsafeShritagramServer interface {
	mustEmbedUnimplementedShritagramServer()
}

func RegisterShritagramServer(s grpc.ServiceRegistrar, srv ShritagramServer) {
	s.RegisterService(&Shritagram_ServiceDesc, srv)
}

func _Shritagram_Callback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallbackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShritagramServer).Callback(m, &shritagramCallbackServer{stream})
}

type Shritagram_CallbackServer interface {
	Send(*ShritagramResponse) error
	grpc.ServerStream
}

type shritagramCallbackServer struct {
	grpc.ServerStream
}

func (x *shritagramCallbackServer) Send(m *ShritagramResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Shritagram_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShritagramServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.shritagram/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShritagramServer).Profile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shritagram_Posts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShritagramServer).Posts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.shritagram/Posts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShritagramServer).Posts(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shritagram_TopSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShritagramServer).TopSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.shritagram/TopSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShritagramServer).TopSearch(ctx, req.(*TopSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shritagram_ServiceDesc is the grpc.ServiceDesc for Shritagram service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shritagram_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.shritagram",
	HandlerType: (*ShritagramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _Shritagram_Profile_Handler,
		},
		{
			MethodName: "Posts",
			Handler:    _Shritagram_Posts_Handler,
		},
		{
			MethodName: "TopSearch",
			Handler:    _Shritagram_TopSearch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Callback",
			Handler:       _Shritagram_Callback_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shritagram.proto",
}
