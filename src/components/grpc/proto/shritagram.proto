/*shritagram is shrimping + instagram*/

syntax = "proto3";

option go_package = "/pb";
package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Shritagram API Documentations";
		version: "1.0";
		contact: {
			name: "shritagram restapi documentation";
			url: "https://github.com/footprintai/shrimping-client";
			email: "shrimping@footprint-ai.com";
		};
		license: {
			name: "BSD 3-Clause License";
			url: "https://github.com/footprintai/shrimping-client/blob/master/LICENSE.txt";
		};
	};
	// Overwriting host entry breaks tests, so this is not done here.
	external_docs: {
		url: "https://github.com/footprintai/shrimping-client";
		description: "shritagram restapi";
	}
	schemes: HTTP;
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
			}
		}
	}
	security: {
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
	responses: {
		key: "500";
		value: {
			description: "Server error";
			schema: {
				json_schema: {
                    type: STRING;
				}
			}
		}
	}
};


service shritagram {
    rpc Callback(CallbackRequest) returns (stream ShritagramResponse) {
        option (google.api.http) = {
            post: "/v1/callback:stream"
            body: "*"
        };
    }
    rpc Profile(ProfileRequest) returns (ShritagramResponse) {
        option (google.api.http) = {
            post: "/v1/profiles:get"
            body: "*"
        };
    }
    rpc Posts(PostRequest) returns (ShritagramResponse) {
        option (google.api.http) = {
            post: "/v1/posts:get"
            body: "*"
        };
    }
    rpc TopSearch(TopSearchRequest) returns (ShritagramResponse) {
        option (google.api.http) = {
            post: "/v1/topsearchs:get"
            body: "*"
        };
    }
};

message CallbackRequest {}

message ProfileRequest {
    repeated string usernames = 1;
    // cacheControl has possible values:
    // no-cache: the request won't go through backend server's cache, it is revalidated with the actualy service (i.g. instagram) 
    // max-age=604800: the request's result will be kept in cache with the duration(in s) specified
    //
    // default value is  max-age=86400
    string cacheControl = 2;

    // priority has three possible values: high/median/low.
    // the server will execute jobs according to its priority.
    string priority = 3;
}

message PostRequest {
    repeated string shortcodes = 1;
    // cacheControl has possible values:
    // no-cache: the request won't go through backend server's cache, it is revalidated with the actualy service (i.g. instagram) 
    // max-age=604800: the request's result will be kept in cache with the duration(in s) specified
    //
    // default value is  max-age=86400
    string cacheControl = 2;

    // priority has three possible values: high/median/low.
    // the server will execute jobs according to its priority.
    string priority = 3;
}


enum ObjectCompressionAlgorithm {
    NONE = 0;
    GZIP = 1;
}

message ShritagramResponse {
    ObjectCompressionAlgorithm compression = 1;
    repeated RawProfileObject rawProfiles = 2;
    repeated RawPostObject rawPosts = 3;
    repeated RawTopSearchObject rawTopSearchs = 4;
}

message RawProfileObject {
    string username = 1;
    bytes rawBytes = 2;
}

message RawPostObject {
    string shortcode = 1;
    bytes rawBytes = 2;
}

message TopSearchRequest {
    repeated string hashtags = 1; // without `#`
    // cacheControl has possible values:
    // no-cache: the request won't go through backend server's cache, it is revalidated with the actualy service (i.g. instagram) 
    // max-age=604800: the request's result will be kept in cache with the duration(in s) specified
    //
    // default value is  max-age=86400
    string cacheControl = 2;

    // priority has three possible values: high/median/low.
    // the server will execute jobs according to its priority.
    string priority = 3;
}

message RawTopSearchObject {
    string hashtag = 1;
    bytes rawBytes = 2;
}
